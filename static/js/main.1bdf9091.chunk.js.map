{"version":3,"sources":["reducers/workskillReducer.js","reducers/index.js","store.js","components/navbar/index.js","components/nametitle/index.js","views/home/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","combineReducers","workskillReducer","state","action","type","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","Navbar","color","dark","expand","className","navbar","right","dropleft","nav","href","Component","NameTitle","Home","Fragment","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wYAAMA,EAAe,GCGNC,4BAAgB,CAAEC,iBDDlB,WAAwC,IAA/BC,EAA8B,uDAAtBH,EAAcI,EAAQ,uCAGnD,OAFMA,EAAOC,KAENF,KEEJG,EAAa,CAACC,KAQLC,EANDC,sBACbC,EALoB,GAOpBC,8BAAoBC,kBAAe,WAAf,EAAmBN,K,uDCmCzBO,G,uLA/BX,OACE,kBAAC,IAAD,CAAWC,MAAM,UAAUC,MAAI,EAACC,QAAM,GACpC,kBAAC,IAAD,KACE,4BAAQC,UAAU,cAAlB,cAEF,kBAAC,IAAD,CAAaC,QAAM,GACjB,kBAAC,IAAD,CAAcC,OAAK,GACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAaC,UAAQ,GACnB,kBAAC,IAAD,CAAmBC,KAAG,GACpB,sCAEF,kBAAC,IAAD,CAAiBJ,UAAU,oBACzB,kBAAC,IAAD,CAAiBK,KAAK,MAAtB,UACA,kBAAC,IAAD,CAAiBA,KAAK,MAAtB,kBACA,kBAAC,IAAD,CAAiBA,KAAK,MAAtB,uBAGA,kBAAC,IAAD,CAAiBA,KAAK,MAAtB,iC,GApBGC,cCVAC,G,uLAEjB,OACE,kBAAC,IAAD,CAAQP,UAAU,aAChB,kBAAC,IAAD,KACE,wBAAIA,UAAU,yBAAd,aACA,uBAAGA,UAAU,oBAAb,6D,GAN6BM,cCcxBE,E,iLAVX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALWH,aCcJI,MAbf,WACE,OACE,kBAAC,IAAD,CAAUnB,MAAOA,GACf,kBAAC,IAAD,KAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,IAAIC,UAAWL,QCDvBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1bdf9091.chunk.js","sourcesContent":["const initialState = {};\n\nexport default function(state = initialState, action) {\n\tswitch (action.type) {\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import { combineReducers } from \"redux\";\nimport workskillReducer from \"./workskillReducer\";\n\nexport default combineReducers({ workskillReducer });\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n\trootReducer,\n\tinitialState,\n\tcomposeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React, { Component } from 'react';\nimport {\n  MDBNavbar,\n  MDBNavbarBrand,\n  MDBNavbarNav,\n  MDBNavItem,\n  MDBCollapse,\n  MDBDropdown,\n  MDBDropdownToggle,\n  MDBDropdownMenu,\n  MDBDropdownItem\n} from 'mdbreact';\nimport './navbar.css';\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <MDBNavbar color='#171614' dark expand>\n        <MDBNavbarBrand>\n          <strong className='white-text'>Ep Sooraj</strong>\n        </MDBNavbarBrand>\n        <MDBCollapse navbar>\n          <MDBNavbarNav right>\n            <MDBNavItem>\n              <MDBDropdown dropleft>\n                <MDBDropdownToggle nav>\n                  <div>menu</div>\n                </MDBDropdownToggle>\n                <MDBDropdownMenu className='dropdown-default'>\n                  <MDBDropdownItem href='#!'>Action</MDBDropdownItem>\n                  <MDBDropdownItem href='#!'>Another Action</MDBDropdownItem>\n                  <MDBDropdownItem href='#!'>\n                    Something else here\n                  </MDBDropdownItem>\n                  <MDBDropdownItem href='#!'>\n                    Something else here\n                  </MDBDropdownItem>\n                </MDBDropdownMenu>\n              </MDBDropdown>\n            </MDBNavItem>\n          </MDBNavbarNav>\n        </MDBCollapse>\n      </MDBNavbar>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport { MDBRow, MDBCol } from 'mdbreact';\nimport './nametitle.css';\n\nexport default class NameTitle extends Component {\n  render() {\n    return (\n      <MDBRow className='nametitle'>\n        <MDBCol>\n          <h2 className='display-3 text-center'>Ep Sooraj</h2>\n          <p className='lead text-center'>\n            Machine Learning Enthusiast | Backend Web Developer\n          </p>\n        </MDBCol>\n      </MDBRow>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './home.css';\nimport Navbar from '../../components/navbar';\nimport NameTitle from '../../components/nametitle';\nimport { MDBBtn } from 'mdbreact';\n\nclass Home extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar />\n        <NameTitle />\n        {/* <MDBBtn gradient='peach'>Test</MDBBtn> */}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Home from './views/home';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        {/* Add nav which will be in every page */}\n        <Switch>\n          <Route exact path='/' component={Home} />\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}